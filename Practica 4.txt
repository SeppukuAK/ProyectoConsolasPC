11 - 25

------Práctica 4--------------
leer anchura y altura en big endian --> darles la vuelta con desplazamiento de bits, usando codigo condicional (ifdef) para hacer la transformacion. SDL ayuda con eso para ver si es big o little endian

En PS4 como se da la vuelta? con desplazamiento de bits y con ands

	c = (c>> 24) | c >> 16 & 0xFF00(8 bits bajos)

------------------------------------12 - 2-----------------------------------------------

Input:

PS4:

El proceso es:

		-En neiborhood. Mando en pantalla o mando host controller. Hay que marcar host controller antes de hacer el view. Hay que hacerlo con el fisico.


	------------------------------------------------------------------------
	Cositas para adri:
	https://wiki.libsdl.org/SDL_Event					SDL_Event
	https://wiki.libsdl.org/SDL_GameControllerAxis		SDL_GameControllerAxis


	SDL_GameController is an abstraction for gamepads ("controllers") similar to the xbox360-pad: They have a DPAD, two analog sticks, 4 buttons on the right (often called A, B, X, Y), shoulder buttons (two of which might be axes) and 3 buttons in the middle (Start, Back and usually some kind of logo-button).
	This includes devices that have a similar layout, like the Playstation DualShock Controller, but different button names; SDL_GameController uses the naming-conventions of xbox360/XInput for all supported devices, so you'll know that SDL_CONTROLLER_AXIS_LEFTX is always the X-Axis of the left Analog Stick, or SDL_CONTROLLER_BUTTON_B is always the rightmost buttons of the 4 buttons on the right, for example. This makes providing consistent input bindings (for this kind of device) to your users easy, like "press B to jump, move around with the left analog stick" - with SDL_Joystick (and the underlying APIs like DirectInput) it's impossible to know which SDL (or DirectInput) axis or button corresponds to which physical axis/button on the device.


	https://stackoverflow.com/questions/35385658/sdl2-going-too-fast-why-does-it-read-multiple-inputs-when-i-press-just-one-bu  Que solo se ejecute una vez al pulsar un botón y no múltiples veces

	https://books.google.es/books?id=VfxNDwAAQBAJ&pg=PT420&lpg=PT420&dq=detect+one+single+input+with+trigger+sdl&source=bl&ots=Dld8o4T2oj&sig=ACfU3U0Kcyj2sbkb2krTQQPQmDxvRZwNtA&hl=es&sa=X&ved=2ahUKEwj299ixg6vmAhVJD2MBHdphDdEQ6AEwBXoECAoQAQ#v=onepage&q=detect%20one%20single%20input%20with%20trigger%20sdl&f=false 	

	Datos sobre triggers, sticks, conectar y desconectar mandos mientras el juego se ejecuta
	-----------------------------------------------------------------------

	https://medium.com/@gayashanbc/explore-the-observer-design-pattern-with-c-8592459b0486


-----------CORRECCION DE LA PRACTICA----------------

1 Funcionamiento
El fuego va demasiado deprisa. No parece haber ""coherencia temporal"" entre un fotograma y el siguiente (o es difícil verla). Pasa también en PS4, aunque pongáis 30fps (FLIP_RATE a 1)
GRAVE Dependiendo de la resolución, no todo se llena con barras. En 1280x720 se queda un espacio sin ellas.
2 Estructura, abstracción y parámetros
GRAVE ¿Por qué Fire tiene un Update y Bars no? Mantenéis la posición en el bucle principal y se la pasáis al Draw*() en lugar de que lo guarden las barras.
Que PS4Renderer::Clear() llame a PutPixel() es un desastre para el rendimiento. En lo que se refiere a encapsulación tiene sentido, pero en este caso ocasiona un cuello de botella artificial, especialmente en modo tiled. Deberíais recorrer la memoria del display buffer directamente para no tener que tener que calcular continuamente la posición en memoria (y transformar el Color).
GRAVE No deberíais enlazar con SDLtest.lib. Ese nombre ¿no os da la idea de que sirve para comprobar que SDL funciona? ¿Por qué lo necesitáis en vuestra práctica?
3 Calidad del código
firePalette debería ser const (y que para Fuego también lo fuera). BarColor también.
4 Parte opcional
Sin hacer.


-------------11-12------------------

NO HACER EL INCLUDE EN .H SI ES POR UN PUNTERO. HACER DECLARACION PREDEFINIDA.
NUNCA METER CODIGO EN EL .H
-SOLO TEMPLATES Y FUNCIONES INLINE (GETTER Y SETTER)
-NO USAR DEFINES PARA CONSTANTES
-	-VARIABLE ESTÁTICA CONST.

-USAR CONST PARA PROTEGERSE DE LOS MALOS USOS.
-USAR ASSERT.

COHERENCIA TEMPORAL -> RECOMIENDA QUE LA IMPLEMENTACION LA METAMOS EN EL "SISTEMA DE ENTIDAD" SI TNEMOS PUERTA, CADA ENTIDAD RECUERDE CUANDO FUE LA ULTIMA VEZ QUE CAMBIO SU ESTADO
"OYE ABRETE" MARCA EL INSTANTE, COMO LA VERSION PINTADA ESTA SUCIA Y TENGO QUE VOLVER A ...
TENEMOS UN CONTADOR DE NUMEROS DE FRAMES A PINTAR PARA PINTAR EL ULTIMO ESTADO Y AL MODIFICAR EL ESTADO "EMPIEZA A ABRIRTE" O LO QUE SEA, EL CONTADOR SE PONGA EN DONDE TOQUE
SI EL NUMERO DEL INDICE NO ES 0 SE PINTA Y SE RESTAURA

LA ENTIDAD TIENE UN METODO RENDER

------------------

Algunos TODO:
-PlatformPC.cpp.
	-BigEndian. Crear metodo

-Input.h.
	-Init.Texture filtering
	-Observer. Es putero?????
	-COMPROBAR INPUT PC QUE ME HE CARGADO LOS DEADZONE DE LOS TRIGGER

-Dollar.cpp
	-TODO: Renderer::GetNumBuffers(). Variable estatica????
	//TODO: SE PINTA MAS VECES DE LAS NECESARIAS AL INICIO
	-Dollar si recibes mas de 1, tambien se hace animacion
	
En todo: 
-Parametros const & ????????
-Atributos que se usan todo el rato declarados en la clase?????????
-ctrl + k + d
-RendererThread. Me ha dado perezota
-FrameRate esta mal. Va demasiado rapido
-DELETE BIEN?? . Array [] . Elementos normal
-TODOS LOS SWITCH TIENEN QUE TENER LLAVES COMO EN RENDERER_THREAD (DABA WARNING EN PS4)
-Existen todos los objetos desde el inicio o se van borrando y creando con los cambios de escena??????????
-Const main no se si son especificas de la plataforma
-Const InputPC.

------------------
COSAS DEL ENUNCIADO:
-PC TERMINA AL HACER CLICK CON RATON O PULSAR TECLA ESCAPE. A veces va a veces no
-DISPARAR EN INPUT

Bien:
-Utilities. No hay nada raro
-Platform. No hay nada raro
-Renderer. Solo no he mirado rendererThread
	-RendererPC. me da miedo drawSquare este mal. Pero funciona